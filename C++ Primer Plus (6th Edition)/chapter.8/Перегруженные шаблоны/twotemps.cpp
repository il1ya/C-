/* Шаблоны используются, когда необходимо создать функции, которые применяют один и тот же алгоритм к различным типам, как было показано в листинге 8.11. 
Однако, возможно, не для всех типов этот алгоритм выглядит совершенно одинаково. В таких случаях можно перегрузить определения шаблонов, точно так же, как перегружаются обычные функции. 
Как и при перегрузке функций, перегруженные шаблоны должны иметь различные сигнатуры. 
Например, в листинг 8.12 добавлен новый шаблон для обмена элементами между двумя массивами. 
Исходный шаблон имеет сигнатуру (Т &, Т &), в то время как новый шаблон — сигнатуру (Т [], Т [] ,int). 
Обратите внимание, что последним аргументом является конкретный тип (int), а не обобщенный. 
Не все аргументы шаблонов обязательно должны иметь обобщенный тип. 
Когда в файле twotemps.срр компилятор встречает первый вызов Swap(), он обнаруживает, что в нем имеется два аргумента типа int, и сопоставляет его с исходным шаблоном. 
Однако во втором случае использования этой функции в качестве аргументов выступают два массива int и значение int, что соответствует новому шаблону. 
Листинг 8.12. twotemps.срр */
// twotemps.срр -- использование перегруженных шаблонов функций 
#include <iostream>
template <typename T> // исходный шаблон 
void Swap(T &a, T &b);

template <typename T> // новый шаблон 
void Swap(T *a, T *b, int n);
void Show(int a[]);
const int Lim = 8;

int main(void)
{
    using namespace std;
    int i = 10, j = 20;
    cout << "i, j = " << i << ", " << j << ".\n";
    cout  << "Using compiler-generated int swapper:\n";
    Swap(i, j); // соответствует исходному шаблону 
    cout << "Now i, j = " << i << ", " << j << ".\n";
    int d1[Lim] = {0,7,0,4,1,7,7,6};
    int d2[Lim] = {0,7,2,0,1,9,6,9};
    cout << "Original arrays:\n";
    Show(d1);
    Show(d2);
    Swap(d1,d2,Lim); // соответствует новому шаблону 
    cout << "Swapped arrays:\n";
    Show(d1);
    Show(d2);
    // cin.get();
    return 0;
}
template <typename T>
void Swap(T &a, T &b)
{
    T temp;
    temp = a;
    a = b;
    b = temp;
}

template <typename T>
void Swap(T a [], T b [], int n)
{
    T temp;
    for(int i = 0; i < n; i++)
    {
        temp = a[i];
        a[i] = b[i];
        b[i] = temp;
    }
}

void Show(int a[])
{
    using namespace std;
    cout << a[0] << a[1] << "/";
    cout << a[2] << a[3] << "/";
    for(int i = 4; i < Lim; i++)
        cout << a[i];
        cout << endl;
}