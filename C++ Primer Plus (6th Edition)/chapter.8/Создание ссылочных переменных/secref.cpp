/*
Ссылка скорее похожа на указатель const; ее следует инициализировать в момент создания, и она остается привязанной к определенной переменной до конца программы. 
Таким образом, конструкция 
int & rodents = rats; 
по сути, является замаскированной записью выражения, подобного следующему: 
int * const pr = &rats; 
В данном случае ссылка rodents играет ту же роль, что и выражение *рг. 
В листинге 8.3 показано, что произойдет при попытке изменить привязку ссылки с переменной bunnies на переменную rats. 
Листинг 8.3. secref.срр */
// secref.срр — определение и использование ссылки 
#include <iostream>
int main(void)
{
    using namespace std;
    int rats = 101;
    int & rodents = rats;   // rodents - это ссылка 
    cout << "rats = " << rats;
    cout << ", rodents = " << rodents << endl;
    cout << "rats address = " << &rats;
    cout << ", rodents address = " << &rodents << endl; // вывод адресов rats и rodents 
    int bunnies = 50;
    rodents = bunnies;
    cout << "bunnies = " << bunnies;
    cout << ", rats = " << rats;
    cout << ", rodents = " << rodents << endl;
    cout << "bunnies address = " << &bunnies;
    cout << ", rodents address = " << &rodents << endl;  // вывод адресов bunnies и rodents 
    return 0;
}
/*
Сначала переменная rodents ссылается на rats, но затем программа предпринимает попытку сделать rodents ссылкой на переменную bunnies: 
rodents = bunnies; 
В какой-то момент кажется, что эта попытка была удачной, поскольку переменная rodents вместо значения 101 принимает значение 50. 
Однако при ближайшем рассмотрении выясняется, что значение переменной rats также изменилось и стало равным 50. 
При этом переменные rats и rodents по-прежнему имеют один и тот же адрес, который отличается от адреса переменной bunnies. 
Поскольку rodents является псевдонимом переменной rats, оператор присваивания в действительности эквивалентен такому оператору: 
rats = bunnies; 
Этот оператор означает следующее: "присвоить переменной rats значение переменной bunnies". 
Короче говоря, ссылку можно устанавливать с помощью инициализирующего объявления, но не операцией присваивания. 
*/