/*
В листинге 8.1 иллюстрируется метод встраивания на примере функции square(), которая возводит в квадрат переданный ей аргумент. 
Обратите внимание, что все определение функции уместилось в одну строку. 
Хотя это не обязательно, но если определение не помещается в одной или двух строках 
(предполагается, что длинные идентификаторы не используются), то такая функция, скорее всего, является плохим кандидатом на то, чтобы быть встроенной. 
Листинг8.1. inline.cpp */
// inline.cpp — использование встроенной функции 
#include <iostream>

// Определение встроенной функции 
inline double square(double x) { return x * x; }

int main(void)
{
    using namespace std;
    double a, b;
    double c = 13.0;
    a = square(5.0);
    b = square(4.5 + 7.5); // допускается передача выражений 
    cout << "a = " << a << ", b = " << b << "\n";
    cout << "c = " << c;
    cout << ", c squared = " << square(c++) << "\n";
    cout << "Now c = " << c << "\n";
    return 0;
}
/*
Полученные результаты показывают, что встраиваемая функция передает аргументы по значению, как это принято для обычных функций. Если аргумент  
представляет собой выражение вроде 4.5 + 7.5, функция передает значение этого выражения. 
В рассматриваемом случае оно равно 12. Из этого следует, что средство inline языка 
C++ обладает существенными преимуществами перед макроопределениями языка С. (См. врезку "Встраивание или макросы" ниже в этой главе.) 
Хоть в программе нет отдельного прототипа, тем не менее, возможности применения прототипов C++ проявляются и в ней. 
Дело в том, что полное определение функции, которое дается перед тем, как она будет выполнена первый раз, служит прототипом. 
Это означает, что можно использовать функцию square () с аргументом типа int или long, и программа автоматически выполнит приведение аргумента к типу double, прежде чем передавать его значение функции: 
*/