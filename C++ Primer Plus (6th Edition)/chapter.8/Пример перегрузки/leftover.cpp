/*
Ранее в главе была создана функция left(), которая возвращает указатель на  первые п символов в строке. 
Теперь разработаем еще одну функцию left(), но на этот раз она будет возвращать первые п цифр целочисленного значения. 
Она применима, например, для анализа первых трех цифр почтового кода США, записанного в виде целое число, с целью сортировки по областям. 
Целочисленную версию функции несколько труднее запрограммировать, чем строковую, поскольку цифры не хранятся в отдельных элементах массива. 
Один из способов решения предполагает сначала подсчет количества цифр в числе. Деление числа на 10 уменьшает его запись на одну цифру. 
Таким образом, можно воспользоваться делением, чтобы подсчитать количество цифр в числе. 
Точнее, эту процедуру можно выполнить в цикле, подобном приведенному ниже: 
    unsigned digits = 1; 
    while (n /= 10) 
    digits++; 
В этом цикле подсчитывается, сколько раз можно удалить цифру из числа п до того, как не останется ни одной цифры. 
Вспомните, что запись п /= 10 является сокращением от п = п / 10. Если, например, п равно 8, то при вычислении проверяемого выражения переменной п присваивается значение 8/10, или 0, поскольку деление целочисленное. 
Выполнение цикла при этом прекращается, и значение переменной digits остается равным 1. Но если значение п равно 238, то на первом этапе проверки условия цикла переменной п присваивается значение 238 / 10, или 23. 
Это значение не равно нулю, поэтому в ходе выполнения цикла значение переменной digits увеличивается до 2. 
На следующем этапе цикла значение п устанавливается равным 23 / 10, или 2. Эта величина также не равна нулю, поэтому значение digits возрастает до 3. 
На следующем этапе цикла значение п устанавливается равным 2/10, или 0, и выполнение цикла прекращается, а значение переменной digits остается равным 3, что и является правильным результатом. 
Теперь предположим, что исходное число содержит пять цифр и нужно возвратить первые три цифры. 
Чтобы получить данное трехзначное число, можно два раза разделить исходное число на 10. 
При каждом делении числа на 10 в записи числа удаляется одна цифра справа. Чтобы узнать, какое количество цифр нужно удалить, следует просто вычислить количество цифр, которые требуется отобразить, из общего 
количества цифр в представлении исходного числа. 
Например, чтобы отобразить четыре цифры числа, представленного девятью цифрами, удалите последние пять цифр. 
Это решение можно представить в виде следующего кода: 
    ct = digits - ct; 
    while (ct--) 
    num /=10; 
    return num; 
В листинге 8.10 этот код помещен в новую функцию left(). Данная функция содержит и другие операторы, предназначенные для обработки специальных случаев, 
таких как запрос вывода нулевого количества цифр или количества, превышающего длину представления исходного числа. 
Поскольку сигнатура новой функции left() отличается от сигнатуры старой функции left(), мы получаем возможность использовать обе функции в одной и той же программе. 
Листинг 8.10. leftover.срр */
// leftover.срр — перегрузка функции left() 
#include <iostream>
unsigned long left(unsigned long num, unsigned ct);
char *left(const char *str, int n = 1);
int main(void)
{
    using namespace std;
    char *trip = "Hawaii!!";     // тестовое значение 
    unsigned long n = 12345678;  // тестовое значение 
    int i;
    char *temp;
    for(i = 1; i < 10; i++)
    {
        cout << left(n, i) << endl;
        temp = left(trip, i);
        cout << temp << endl;
        delete [] temp;         // указатель на временную область хранения 
    }
    return 0;
}
// Возвращает первых ct цифр числа num 
unsigned long left(unsigned long num, unsigned ct)
{
    unsigned digits = 1;
    unsigned long n = num;
    if(ct == 0 || num == 0)
        return 0; // возврат О в случае отсутствия цифр 
        while(n /= 10)
            digits++;
        if(digits > ct)
        {
            ct = digits - ct;
            while(ct--)
                num /= 10;
                return num; // возврат ct знаков слева 
        }
        else  // если ct >= количества цифр 
            return num; // возврат числа целиком 
}

// Возвращает указатель на новую строку, состоящую 
// из n первых символов строки str 
char *left(const char *str, int n)
{
    if(n < 0)
    n = 0;
    char *p = new char[n+1];
    int i;
    for(i = 0; i < n && str[i]; i++)
        p[i] = str[i]; // копирование символов 
    while(i <= n)
        p[i++] = '\0';
        return p;      // установка остальных символов строки в '\0* 
}
/*
Ниже показан вывод программы из листинга 8.10: 
1 
н 
12 
На 
123 
Haw 
1234 
Hawa 
12345 
Hawai 
123456 
Hawaii 
1234567 
Hawaii! 
12345678 
Hawaii!! 
12345678 
Hawaii!! 
*/