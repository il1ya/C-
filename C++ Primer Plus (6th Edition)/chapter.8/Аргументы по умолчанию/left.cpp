/*
В функции со списком аргументов значения по умолчанию должны добавляться в конце. 
Другими словами, нельзя предоставить значение по умолчанию некоторому аргументу до тех пор, пока не будут предоставлены значения по умолчанию для всех аргументов, размещенных справа от него: 
int harpo(int n, int m = 4, int j = 5) ; // ПРАВИЛЬНО 
int chico(int n, int m = 6, int j); // НЕПРАВИЛЬНО 
int groucho(int к = 1, int m = 2, int n = 3) ; // ПРАВИЛЬНО 
Например, прототип функции harpo() допускает реализацию вызова функции с одним, двумя или тремя аргументами: 
beeps = harpo (2); //то же, что и harpo (2, 4, 5) 
beeps = harpo(1,8) ; //тоже, что и harpo(1,8,5) 
beeps = harpo (8,7,6); // аргументы по умолчанию не используются 
Значения фактических аргументов присваиваются соответствующим формальным аргументам в направлении слева направо; пропускать аргументы нельзя. 
Таким образом, следующее выражение является недопустимым: 
beeps = harpo (3, ,8); // неправильно, m не устанавливается в 4 
Аргументы по умолчанию не являются выдающимся достижением в программировании — они предназначены лишь для удобства. 
Когда вы начнете работать с классами, то убедитесь в том, что этот прием позволяет сократить количество конструкторов, методов и перегрузок методов, подлежащих определению. 
Пример использования аргументов по умолчанию приведен в листинге 8.9. 
Обратите внимание, что значения по умолчанию отражает только прототип.  
Определение функции будет таким же, как и без аргументов по умолчанию. 
Листинг 8.9. left.срр */
// left.срр -- строковая функция с аргументом по умолчанию 
#include <iostream>
const int ArSize = 80;
char * left(const char * str, int n = 1);
int main(void)
{
    using namespace std;
    char sample[ArSize];
    cout << "Enter a string:\n";
    cin.get(sample, ArSize);
    char *ps = left(sample, 4);
    cout << ps << endl;
    delete [] ps; // освободить старую строку 
    ps = left(sample);
    cout << ps << endl;
    delete [] ps; // освободить новую строку 
    return 0;
}

// Эта функция возвращает указатель на новую строку, 
// состоящую из первых п символов строки str. 
char * left(const char * str, int n)
{
    if(n < 0)
        n = 0;
        char * p = new char[n+1];
        int i;
        for(i = 0; i < n && str[i]; i++)
        p[i] = str[i]; // копирование символов 
        while(i <= n)
        p[i++] = '\0'; // установка остальных символов строки в '\0' 
        return p; 
}
/*
Ниже показан пример выполнения программы из листинга 8.9: 
Enter a string: 
forthcoming 
fort 
f 
*/