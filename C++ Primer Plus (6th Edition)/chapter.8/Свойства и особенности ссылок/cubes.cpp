/*
С использованием ссылочных аргументов связан ряд особенностей, о которых следует знать. 
Для начала обратимся к листингу 8.5. В нем используются две функции для возведения в куб значения аргумента. 
Одна из них принимает аргумент типа double, в то время как другая получает ссылку на значение типа double. 
Код возведения в куб преднамеренно выглядит несколько необычно, чтобы проиллюстрировать работу со ссылками. 
Листинг 8.5. cubes.срр */
// cubes.срр — обычные и ссылочные аргументы 
#include <iostream>
double cube(double a);
double refcube(double &ra);
int main(void)
{
    using namespace std;
    double x = 3.0;
    cout << cube(x);
    cout << " = cube of " << x << endl;    // вывод значения в кубе 
    cout << refcube(x);
    cout << " = cube of " << x << endl; // вывод значения в кубе 
    return 0;
}

double cube(double a)
{
    a *= a * a;
    return a;
}

double refcube(double &ra)
{
    ra *= ra * ra;
    return ra;
}
/*
Ниже показан вывод программы из листинга 8.5: 
27 = cube of 3 
27 = cube of 27 
Обратите внимание, что функция refcube () изменяет значение х в функции main(), в то время как функция cube() этого не делает. 
Это напоминает причину, почему передача по значению является нормой. 
Переменная а является локальной для функции cube(). Она инициализируется значением х, однако изменения переменной а не отражаются на х. 
Тем не менее, поскольку функция refcube() использует в качестве аргумента ссылку, изменения, которые она вносит в переменную rа, фактически выполняются над переменной х. 
*/