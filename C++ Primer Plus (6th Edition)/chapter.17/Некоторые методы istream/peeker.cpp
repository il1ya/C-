/*
Функция putback() вставляет символ обратно в строку ввода. При этом вставленный символ становится первым символом, читаемым следующим оператором ввода. 
Метод putback() принимает один аргумент char, представляющий вставляемый символ, и возвращает тип istream &, что позволяет осуществлять конкатенацию вызова с другими методами istream. 
Применение peek() подобно вызову get() для чтения символа с последующим использованием putback() для помещения прочитанного символа обратно во входной поток. 
Однако putbackO дает возможность вернуть в поток символ, отличающийся от последнего прочитанного. 
В листинге 17.14 используются два подхода для чтения и отображения ввода, вплоть до символа # (но, не включая его). Первый подход считывает символы до 
символа # и затем использует putback() для вставки этого символа обратно в поток. 
Второй подход применяет peek О для того, чтобы заглянуть вперед, прежде чем выполнить считывание ввода. 
Листинг 17.14. реекег.срр 
*/
// реекег.срр — некоторые методы istream 
#include <iostream>

int main()
{
    using std::cout;
    using std::cin;
    using std::endl;

    // Считывание и отображение символов до символа # 
    char ch;

    while(cin.get(ch))
    {
        if(ch != '#')
            cout << ch;
        else{
            cin.putback(ch);
            break;
        }
    }
    if(!cin.eof())
    {
        cin.get(ch);
        cout << endl << ch << " is next input character.\n";
    }
    else
    {
        cout << "End of file reached.\n";   // достигнут конец файла 
        //std::exit(0);
    }
    while(cin.peek() != '#')                // "заглядывание" вперед 
    {
        cin.get(ch);
        cout << ch;
    }
    if(!cin.eof())
    {
        cin.get(ch);
        cout << endl << ch << " is next input character.\n";
    }
    else
        cout << "End of file reached.\n";   // достигнут конец файла 

    return 0;
}
/*
Замечания по программе 
Давайте подробнее рассмотрим код в листинге 17.14. Первый подход использует цикл while для считывания ввода: 
while(cin.get(ch))
    {
        if(ch != '#')
            cout << ch;
        else{
            cin.putback(ch);
            break;
        }
    }
Выражение cin.get(ch) возвращает false при достижении условия конца файла, поэтому эмуляция конца файла с клавиатуры завершает цикл. 
Если символ # появляется раньше,что программа помещает его обратно во входной поток и с помощью оператора break завершает цикл. 
Второй подход проще: 
while(cin.peek() != '#')                // "заглядывание" вперед 
    {
        cin.get(ch);
        cout << ch;
    }
Программа просматривает следующий символ. Если он не является символом #, программа считывает следующий символ, отображает его и просматривает следующий символ. 
Это продолжается до тех пор, пока не появится завершающий символ. 
*/