/*
Давайте посмотрим, как устанавливается основание системы счисления для отображения целых чисел. 
Для управления отображением целых чисел с использованием оснований 10, 16 или 8 можно применять манипуляторы dec, hex и oct. 
Например, следующий вызов функции устанавливает для объекта cout шестнадцатеричную систему счисления: 
hex(cout); 
После этого программа будет выводить целые значения в шестнадцатеричной форме до тех пор, пока не будет установлено другое основание. 
Обратите внимание, что манипуляторы не являются функциями-членами, поэтому не должны вызываться объектом. 
Хотя в действительности манипуляторы являются функциями, обычно их используют следующим образом: 
cout << hex; 
Класс ostream перегружает операцию << так, что она становится эквивалентной вызову функции hex (cout). 
Манипуляторы определены в пространстве имен std. 
Применение этих манипуляторов иллюстрируется в листинге 17.3. Эта программа отображает значение целого числа и его квадрата в трех разных системах счисления. 
Обратите внимание, что манипуляторы можно использовать отдельно или как часть последовательности вставок. 
Листинг 17.3. manip.cpp */
// manip.cpp -- использование манипуляторов формата 
#include <iostream>
int main()
{
    using namespace std;
    // Вывод приглашения к вводу целого числа 
    cout << "Enter an integer: ";

    int n;
    cin >> n;
    cout << "n   n*n\n";
    cout << n << "   " << n * n << " (decimal)\n";

    // Установка шестнадцатеричного режима вывода 
    cout << hex;
    cout << n <<    "  ";
    cout << n * n << " (hexadecimal)\n";

    // Установка восьмеричного режима 
    cout << oct << n <<     " " << n * n << "  (octal)\n";

    // Альтернативный способ вызова манипулятора 
    dec(cout);
    cout << n << "  " << n * n << " (decimal)\n";
    return 0;
}
/*
Настройка ширины полей 
Возможно, вы заметили, что столбцы значений, выведенные программой из листинга 17.3, не выровнены. 
Это связано с тем, что числа имеют разную ширину полей. 
Для размещения чисел различной длины в полях постоянной ширины можно воспользоваться функцией-членом width. 
Этот метод имеет следующие прототипы: 
int width(); 
int width(int i); 
Первая форма возвращает текущую установку ширины поля. Вторая устанавливает ширину поля равной і пробелам и возвращает предыдущее значение ширины. 
Это позволяет сохранить предыдущее значение на случай, если позднее понадобится восстановить старое значение ширины поля. 
Метод width() касается только следующего отображаемого элемента, после чего ширина поля возвращается к значению по умолчанию. 
Например, рассмотрим следующие операторы: 
cout « '#'; 
cout.width(12); 
cout << 12 << "#" << 24 << "#\n"; 
Поскольку width() — функция-член, для ее вызова нужно указать объект (в данном случае — cout). Оператор вывода создает следующую строку вывода: 
# 12#24# 
Значение 12 помещается у правого края поля шириной в 12 символов. 
Это называется выравниванием по правому краю. После этого ширина поля возвращается в значение по умолчанию, и два символа # и значение 24 выводятся в полях, ширина которых равна длине этих элементов вывода. 
*/