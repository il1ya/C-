/*
Рассмотрим программу, которая дописывает данные в конец файла. 
Программа поддерживает файл, содержащий список гостей. Когда она начинает выполнение, то отображает текущее содержимое файла, если он уже существует. 
Она может использовать метод is_open() после попытки открытия файла для проверки, существует ли он. 
Затем программа открывает файл для вывода, используя режим ios_base::арр. 
Затем она принимает ввод с клавиатуры, чтобы дописать информацию в файл. И, наконец, программа отображает измененное содержимое файла. 
Код в листинге 17.18 иллюстрирует, как все это можно реализовать на практике. Обратите внимание, как программа использует метод is_open() для проверки успешности открытия файла. 
На заметку! 
Файловый ввод-вывод — возможно, наименее стандартизованный аспект C++ в его ранних реализациях, и даже сейчас многие компиляторы не полностью соответствуют современному стандарту. 
Например, некоторые используют такой режим, как nocreate, который не является частью современного стандарта. 
Вдобавок лишь некоторые компиляторы требуют вызова fin.clear() перед открытием того же файла для чтения во второй раз. 
Листинг 17.18. append.срр 
*/
// append.срр — добавление информации в файл 
#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>                  // для exit() 

const char *file = "guests.txt";
int main()
{
    using namespace std;
    char ch;

    // Отображение начального содержимого 
    ifstream fin;
    fin.open(file);

    if(fin.is_open())
    {
        cout << "Here are the current contents of the " << file << " file:\n";
        while(fin.get(ch))
        cout << ch;
        fin.close();
    }

    // Добавление новых имен 
    ofstream fout(file, ios::out | ios::app);
    if(!fout.is_open())
    {
        cerr << "Can't open " << file << " file for output.\n";         // не удается открыть файл 
        exit(EXIT_FAILURE);
    }
    cout << "Enter guest names (enter a blank line to quit):\n";
    string name;
    while(getline(cin, name) && name.size() > 0)
    {
        fout << name << endl;
    }
    fout.close();

    // Отображение измененного файла 
    fin.clear();        // не обязательно для некоторых компиляторов 
    fin.open(file);
    if(fin.is_open())
    {
        cout << "Here are the new contents of the " << file << " file:\n";
        while(fin.get(ch))
            cout << ch;
            fin.close();
    }
    cout << "Done.\n";
    return 0;
}