/*
При установке некоторых значения форматирования, таких как ширина поля, использовать средства iostream неудобно. 
Для упрощения задачи C++ предлагает дополнительные манипуляторы в заголовочном файле iomanip. 
Они обеспечивают теже функциональные средства, что и рассмотренные выше, но более удобным образом. 
Три наиболее часто используемые из них функции — это 
setprecision() для установки точности, 
setfill() для установки символа-заполнителя и setw() для установки ширины поля. 
В отличие от ранее рассмотренных манипуляторов, эти принимают аргументы. Манипулятор setprecision() принимает целочисленный  
аргумент, задающий точность, setfill() принимает аргумент типа char, указывающий символ-заполнитель, a setw() принимает целочисленный аргумент, устанавливающий ширину поля. 
Так как все они являются манипуляторами, их можно объединять операцией конкатенации в операторе cout. 
Это делает манипулятор setw() особенно удобным при отображении нескольких столбцов значений. 
Код в листинге 17.10 иллюстрирует это, несколько раз изменяя ширину поля и символ-заполнитель при выводе одной строки. 
Он использует также некоторые из более новых стандартных манипуляторов. 
На заметку! 
Некоторые системы C++ не выполняют автоматический поиск библиотеки математических функций. 
Как упоминалось ранее, некоторые системы Unix требуют выполнения следующего оператора для доступа к библиотеке математических функций: 
ц $ СС iomanip.С -lm 
Листинг 17.10. iomanip.ерр 
*/
// iomanip.ерр — использование манипуляторов из iomanip 
// некоторые манипуляторы требуют явной компоновки с библиотекой математических функций 
#include <iostream>
#include <iomanip>
#include <cmath>

int main()
{
    using namespace std;
    // Использование новых стандартных манипуляторов 
    cout << fixed << right;

    // Использование манипуляторов iomanip для извлечения квадратного корня и корня четвертой степени 
    cout << setw(6) << "N" << setw(14) << "square root" << setw(15) << "fourth root\n";
    double root;    // извлечение корня 
    for(int n = 10; n <= 100; n += 10)
    {
        root = sqrt(double(n));
        cout << setw(6) << setfill('.') << n << setfill(' ')
             << setw(12) << setprecision(3) << root
             << setw(14) << setprecision(4) << sqrt(root) << endl;
    }
    return 0;
}

// Теперь можно вывести аккуратно выровненные столбцы. Применение манипулятора fixed ведет к отображению завершающих нулей. 
