/* Хотя строки в стиле С и класс string служат в основном одним и тем же целям, класс string больше похож на структуру, чем на массив. 
Например, структуру можно присвоить другой структуре, а объект — другому объекту. 
Структуру можно передавать как единую сущность в функцию, и точно так же можно передавать объект. 
Когда требуется несколько строк, можно объявить одномерный массив объектов string вместо двумерного массива char. 
В листинге 7.14 представлен короткий пример, в котором объявляется массив объектов string и передается функции, отображающей их содержимое. 
Листинг 7.14. topfіѵе.срр */
// topfіѵе.срр -- обработка массива объектов string 
#include <iostream>
#include <string>
using namespace std;
const int SIZE = 5;
void display(const string sa[], int n);
int main(void)
{
    string list[SIZE]; // массив из 5 объектов string 
    cout << "Enter your " << SIZE << " favorite astronomical sights:\n";
        // Ввод астрономических объектов 
    for(int i = 0; i < SIZE; i++)
    {
        cout << i + 1 << ": ";
        getline(cin, list[i]);
    }
    cout << "Your list:\n";   // вывод списка астрономических объектов 
    display(list, SIZE);
    return 0;
}

void display(const string sa[], int n)
{
    for(int i = 0; i < n; i++)
    cout << i + 1 << ": " << sa[i] << endl;
}
/*
В этом примере важно отметить, что если не принимать во внимание функцию getline(), то эта программа воспринимает объекты string как любой встроенный тип, подобный int. 
Если вам нужен массив string, вы просто используете обычный формат объявления массива: 
string list[SIZE]; // массив из 5 объектов string 
Каждый элемент массива list — это объект string, и он может использоваться следующим образом: 
getline(cin, list[i]); 
Аналогично, формальный аргумент sa является указателем на объект string, поэтому sa[і] — объект типа string, и он может использоваться соответственно: 
cout << i + 1 << ": " << sa[i] << endl;
*/