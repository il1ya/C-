/* Передача структур по значению имеет наибольший смысл, когда структура относительно компактна, поэтому давайте рассмотрим несколько примеров, демонстрирующих такой подход. 
Первый пример имеет дело со временем путешествия (не путать с путешествиями во времени). 
Некоторые карты сообщают, что на проезд из Thunder Falls в Bingo City нужно потратить 3 часа 50 минут, а на проезд из Bingo City в Grotesquo — 1 час 25 минут. 
Для представления этих периодов времени можно использовать структуру, один член которой предназначен для представления часов, а другой — для минут. 
Сложение двух периодов будет не простым, потому что придется преобразовывать минуты в часы, когда их сумма превышает 60. 
Например, два периода времени на дорогу, приведенные выше, дают в сумме 4 часа 75 минут, что должно быть преобразовано в 5 часов 15 минут. 
Давайте разработаем структуру для представления значений времени, а затем функцию, которая будет принимать две таких структуры в виде аргументов и возвращать структуру, представляющую их сумму. 
Определить структуру просто: 
struct travel_time 
{ 
    int hours; 
    int mins; 
}; 
Далее рассмотрим прототип для функции sum(), который вернет сумму двух таких структур. Возвращаемое значение должно иметь тип travel_time, как и два ее аргумента. 
Таким образом, прототип должен выглядеть следующим образом: travel_time sum(travel_time tl, travel_time t2); 
Чтобы сложить два периода времени, сначала необходимо сложить минуты. 
Целочисленное деление на 60 даст количество часов, в которые сложатся минуты, а операция модуля (%) даст оставшиеся минуты. 
В листинге 7.11 этот подход воплощен в функции sum(); еще одна функция, show_time(), служит для отображения содержимого структуры travel_time. 
Листинг 7.11. travel.срр */
// travel.срр -- использование структур с функциями 
#include <iostream>
struct travel_time
{
    int hours;
    int mins;
};
const int Mins_per_hr = 60;
travel_time sum(travel_time t1, travel_time t2);
void show_time(travel_time t);
int main(void)
{
    using namespace std;
    travel_time day1 = {5, 45};         // 5 часов 45 минут 
    travel_time day2 = {4, 55};         // 4 часов 55 минут 
    travel_time trip = sum(day1, day2);
    cout << "Two-day total: ";           // итог за два дня 
    show_time(trip);
    travel_time day3 = {4, 32};
    cout << "Three-day total: ";        // итог за три дня 
    show_time(sum(trip, day3));
    return 0;
}

travel_time sum(travel_time t1, travel_time t2)
{
    travel_time total;
    total.mins = (t1.mins + t2.mins) % Mins_per_hr;
    total.hours = t1.hours + t2.hours + (t1.mins + t2.mins) / Mins_per_hr;
    return total;
}
void show_time(travel_time t)
{
    using namespace std;
    cout << t.hours << " hours, " << t.mins << " minutes\n";        // часов, минут 
}
/*
Здесь travel_time действует как имя обычного стандартного типа; его можно использовать для объявления переменных, типа возврата функций и типа аргументов функций. 
Поскольку такие переменные, как total и tl, являются структурами travel_time, вы можете применять к ним операцию точки, чтобы обращаться к членам. 
Обратите внимание, что поскольку функция sum() возвращает структуру travel_time, ее можно использовать в качестве аргумента функции show_time(). 
А так как функции C++ по умолчанию передают аргументы по значению, то вызов show_time (sum(trip, day3)) сначала вычислит sum(trip, day3), чтобы получить ее возвращаемое значение. 
Затем это значение (а не сама функция) передается show_time(). 
Ниже показан вывод программы из листинга 7.11: 
Two-day total: 10 hours, 40 minutes 
Three-day total: 15 hours, 12 minutes 
*/