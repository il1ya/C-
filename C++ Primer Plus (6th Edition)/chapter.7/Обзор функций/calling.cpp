/* Давайте посмотрим, что вы уже знаете о функциях. Для того чтобы использовать функцию в C++, вы должны выполнить следующие шаги: 
• предоставить определение функции; 
• представить прототип функции; 
• вызвать функцию. 
Если вы планируете пользоваться библиотечной функцией, то она уже определена и скомпилирована. 
К тому же вы можете, да и должны пользоваться стандартным библиотечным заголовочным файлом, чтобы предоставить своей программе доступ к прототипу. 
Все что вам остается — правильно вызвать эту функцию. В примерах, которые рассматривались до сих пор в настоящей книге, это делалось много раз. 
Например, перечень стандартных библиотечных функций С включает функцию strlen() для нахождения длины строки. 
Ассоциированный стандартный заголовочный файл cstring содержит прототип функции для strlen() и ряда других связанных со строками функций. 
Благодаря предварительной работе, выполненной создателями компилятора, вы используете strlen() без всяких забот. 
Когда вы создаете собственные функции, то должны самостоятельно обработать все три аспекта — определение, прототипирование и вызов. 
В листинге 7.1 демонстрируются все три шага на небольшом примере. 
Листинг7.1. calling.срр */
// calling.срр -- определение, прототипирование и вызов функции 
#include <iostream>
void simple(); // прототип функции 
int main(void)
{
    using namespace std;
    cout << "main() will call the simple() function:\n";
    simple(); // вызов функции 
    cout << "main() is finished with the simple() function.\n";
    // cin.get();
    return 0;
}
// Определение функции 
void simple()
{
    using namespace std;
    cout << "I'm but a simple function.\n";
}
/*
Выполнение программы в main() останавливается, как только управление передается функции simple(). 
По завершении simple () выполнение программы возобновляется в функции main(). 
В этом примере внутри каждого определения функции присутствует директива using, потому что каждая функция использует cout. 
В качестве альтернативы можно было бы поместить единственную директиву using над определением функции либо использовать std::cout. 
Давайте рассмотрим перечисленные ниже шаги подробнее. 
*/