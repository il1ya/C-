/* Вы уже знакомы с тем, как вызываются функции, но, возможно, менее уверенно себя чувствуете в том, что касается их прототипирования, поскольку зачастую  
прототипы функций скрываются во включаемых (с помощью #include) файлах. 
В листинге 7.2 демонстрируется использование функций cheers () и cube (); 
обратите внимание на их прототипы. 
Листинг 7.2. protos.cрр */
// protos.cрр — использование прототипов и вызовы функций 
#include <iostream>
void cheers(int);               // прототип: нет значения возврата 
double cube(double x);          // прототип: возвращает double 

int main(void)
{
    using namespace std;
    cheers(5);                  // вызов функции 
    cout << "Give me a number: ";
    double side;
    cin >> side;
    double volume = cube(side); // вызов функции 
    cout << "A " << side << "-foot cube has a volume of ";
    cout << volume << " cubic feet.\n";
    cheers(cube(2));            // защита прототипа в действии 
    return 0;
}
void cheers(int n)
{
    using namespace std;
    for(int i = 0; i < n; i++)
    cout << "Cheers! ";
    cout << endl;
}

double cube(double x)
{
    return x * x * x;
}
/*
Программа из листинга 7.2 помещает директиву using только в те функции,  которые используют члены пространства имен std. 
Вот пример запуска: 
heers! Cheers! Cheers! Cheers! Cheers! 
Give me a number: 5 
A 5-foot cube has a volume of 125 cubic feet. 
Cheers! Cheers! Cheers! Cheers! Cheers! Cheers! Cheers! Cheers! 
Обратите внимание, что main() вызывает функцию cheers() типа void с использованием имени функции и аргументов, за которыми следует точка с запятой: 
cheers(5);. 
Это пример оператора вызова функции. Но поскольку cube() возвращает значение, main() может применять его как часть оператора присваивания: 
double volume = cube(side); 
Но как говорилось ранее, необходимо сосредоточиться на прототипах. Что вы должны знать о прототипах? Для начала вы должны понять, почему C++ требует их. 
Затем, поскольку C++ требует прототипы, вам должен быть известен правильный синтаксис их написания. И, наконец, вы должны оценить, что они дают. 
Рассмотрим все эти вопросы по очереди, используя листинг 7.2 в качестве основы для обсуждения. 
*/