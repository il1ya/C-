/* 
Возврат кода ошибки 
Для определения возникшей проблемы удобнее не просто прекращение выполнения программы, а использование значения, возвращаемого функцией. 
Например, член get(void) класса ostream обычно возвращает ASCII-код очередного введенного символа, однако в случае достижения конца файла он возвращает специальное значение EOF. 
Для hmean() этот подход не годится: любое числовое значение является допустимым возвращаемым значением, и не существует специального значения для индикации проблемы. 
В этой ситуации можно в качестве аргумента функции применять указатель или ссылку — это позволяет вернуть значение в вызывающую программу, и на основе 
этого значения определить успешность выполнения функции. Разновидность такого приема используется в семействе istream перегруженных операций >>. 
Информируя вызывающую программу об успехе или неудаче, можно предпринять действия, отличные от аварийного завершения программы. 
В листинге 15.8 приведен пример такого подхода. В нем функция hmean() определена по-другому: теперь она возвращает значение bool, которое показывает, успешно ли выполнена функция. 
В ней также добавлен третий аргумент для возврата ответа. 
Листинг 15.8. error2.срр 
*/
//error2.cpp -- возврат кода ошибки 
#include <iostream>
#include <cfloat>                            // (или float.h) для DBL_MAX 

bool hmean(double a, double b, double *ans);

int main()
{
    double x, y, z;
    std::cout << "Enter two numbers: ";      // запрос на ввод двух чисел 
    while(std::cin >> x >> y)
    {
        if(hmean(x,y,&z))
            std::cout << "Harmonic mean of " << x << " and " << y << " is " << z << std::endl;      // вывод среднего гармонического 
        else
            std::cout << "One value should not be the negative " << "of the other - try again.\n";  // одно значение не может быть равно 
                                                                                                    // другому с обратным знаком 
            std::cout << "Enter next set of numbers <q to quit>: ";
                        // запрос следующих двух чисел 
    }
    std::cout << "Bye!\n";
    return 0;
}
bool hmean(double a, double b, double *ans)
{
    if(a == -b)
    {
        *ans = DBL_MAX;
        return false;
    }
    else
    {
        *ans = 2.0 * a * b / (a + b);
        return true;
    }
}
/*
Замечания по программе 
Структура программы в листинге 15.8 позволяет пользователю продолжить работу, обойдя ситуацию, возникшую из-за неправильного ввода. 
Конечно, программа возлагает на пользователя обработку возвращаемых функцией значений — программисты это делают не всегда. 
Например, чтобы сохранять примеры как можно более краткими, в большинстве листингов этой книги не проверяется, успешно ли завершен вывод в поток cout. 
В качестве третьего аргумента можно использовать указатель или ссылку. 
Многие программисты предпочитают применять указатели на аргументы встроенных типов — тогда понятно, какой аргумент использовался для ответа. 
Еще один вариант сохранения возвращаемых значений — применение глобальных переменных. 
Функция, в которой возможны проблемы, в аварийных ситуациях может заносить в глобальную переменную определенное значение, а вызывающая программа может проверить эту переменную. 
Этот метод реализован в стандартной математической библиотеке языка С, в которой для подобных целей служит глобальная переменная errno. 
Разумеется, нужно обеспечить, чтобы какая-нибудь другая функция не использовала глобальную переменную с таким же именем для других целей. 
*/