/* Другими словами, нужно начать со стартового элемента, добавить шаг для получения следующего элемента и т.д. до тех пор, пока не будет выбрано 4 элемента. 
Если, скажем, variant — это объект valarray<int>, то следующий оператор присвоит элементам 1, 4, 7 и 10 значение 10: 
varint[slice(1,4,3)] = 10; // присваивание выбранным элементам значения 10 
Это специальное свойство индексации позволяет применять одномерный объект valarray для представления двумерных данных. 
Например, предположим, что требуется представить массив из 4 строк и 3 столбцов. 
Информацию можно сохранить в 12-элементном объекте valarray. Тогда объект slice (0,3,1), использованный в качестве индекса, представлял бы элементы 0, 1 и 2 — т.е. первую строку. 
Аналогично индекс slice (0, 4, 3) представлял бы элементы 0, 3, 6 и 9 — т.е. первый столбец. 
Некоторые возможности slice демонстрируются в листинге 16.21. 
Листинг 16.21. vslice.срр */
// vslice.срр — использование срезов valarray 
#include <iostream>
#include <valarray>
#include <cstdlib>

const int SIZE = 12;
typedef std::valarray<int> vint;        // для упрощения объявлений 
void show(const vint &v, int cols);
int main()
{
    using std::slice;       // из <valarray> 
    using std::cout;
    vint valint(SIZE);      // представляет 4 строки по 3 элемента 
    int i;
    for(i = 0; i < SIZE; ++i)
        valint[i] = std::rand() % 10;
    cout << "Original array:\n";        // исходный массив 
    show(valint, 3);                    // отображение в виде 3 столбцов 
    vint vcol(valint[slice(1,4,3)]);    // извлечение 2-го столбца 
    cout << "Second column:\n";
    show(vcol, 1);                      // отображение в 1 столбце 
    vint vrow(valint[slice(3,3,1)]);    // извлечение 2-ой строки 
    cout << "Second row:\n";
    show(vrow, 3);
    valint[slice(2,4,3)] = 10;          // присваивание 2-му столбцу 
    cout << "Set last column to 10:\n";
    show(valint, 3);
    cout << "Set first column to sum of next two:\n";

    // Операция + не определена для slice, поэтому преобразуем в valarray<int>
    valint[slice(0,4,3)] = vint(valint[slice(1,4,3)]) + vint(valint[slice(2,4,3)]);
    show(valint, 3);
    return 0; 
}

void show(const vint & v, int cols)
{
    using std::cout;
    using std::endl;
    int lim = v.size();
    for(int i = 0; i < lim; ++i)
    {
        cout.width(3);
        cout << v[i];
        if(i % cols == cols - 1)
            cout << endl;
            else
            cout << ' ';
    }
    if(lim % cols != 0)
        cout << endl;
}
/*
Операция + определена для объектов valarray, таких как valint, и определена для отдельного элемента int вроде valint[1], но, как отмечено в коде листинга 
16.19, операция + не определена для проиндексированных с помощью slice единиц valarray наподобие valint[sliсе(1,4,3)]. 
Поэтому, чтобы сделать возможным сложение, программа конструирует из срезов полные объекты: 
vint(valint[slice(1,4,3)]) // вызов конструктора на основе slice 
Класс valarray предлагает конструкторы для этой цели. 
Поскольку значения устанавливаются с использованием rand(), разные реализации rand() приведут к разным значениям. 
Существуют и другие возможности, включая класс gsiice, предназначенный для представления многомерных массивов, но сказанного должно быть достаточно,  
чтобы дать представление о том, что собой представляет valarray. 
*/