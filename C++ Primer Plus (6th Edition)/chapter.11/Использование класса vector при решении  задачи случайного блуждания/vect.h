/* Иногда удобнее одна форма, иногда — другая, поэтому включим в описание класса оба представления. 
(См. врезку "Множественные представления и классы" далее в этой главе.) 
Спроектируем класс так, что если вы измените одно из представлений вектора, то второе будет изменяться автоматически. 
Возможность обеспечить такое интеллектуальное поведение объекта — еще одно преимущество классов C++. 
В листинге 11.13 приведено объявление класса. Чтобы освежить ваши знания пространств имен, в этом листинге объявление класса помещено внутрь пространства имен VECTOR. 
Кроме того, в программе используется enum с парой констант (RECT и POL), служащих для идентификации этих двух представлений. 
(Такой прием уже рассматривался в главе 10, поэтому мы спокойно можем пользоваться им.) 
Листинг 11.13.vect.h */

// vect.h — класс Vector с операцией « и поддержкой режима координат 
#ifndef VECTOR_H_
#define VECTOR_H_
#include <iostream>
namespace VECTOR
{
    class Vector
    {
            public:
        enum Mode{RECT, POL};
        // RECT — для режима прямоугольных координат, POL — для режима полярных координат 
            private:
        double x;   // горизонтальное значение 
        double y;   // вертикальное значение 
        double mag; // длина вектора 
        double ang; // направление вектора в градусах 
        Mode mode;  // RECT или POL 

        // Закрытые методы для установки значений 
        void set_mag();
        void set_ang();
        void set_x();
        void set_y();
            public:
        Vector();
        Vector(double n1, double n2, Mode form = RECT);
        void reset(double n1, double n2, Mode form = RECT);
        ~Vector();
        double xval() const {return x;}     // сообщает значение х 
        double yval() const {return y;}     // сообщает значение у 
        double magval() const {return mag;} // сообщает модуль 
        double angval() const {return ang;} // сообщает угол 
        void polar_mode();                  // устанавливает режим в POL 
        void rect_mode();                   // устанавливает режим в RECT 

        // Перегрузка операций 
        Vector operator+(const Vector & b) const;
        Vector operator-(const Vector & b) const;
        Vector operator-() const;
        Vector operator*(double n) const;

        // Друзья 
        friend Vector operator*(double n, const Vector & a);
        friend std::ostream &
        operator << (std::ostream & os, const Vector & v);
    };
}// конец пространства имен VECTOR 
#endif
/*
В листинге 11.13 обратите внимание, что четыре функции, возвращающие значения компонентов, определены в объявлении класса. 
Это автоматически делает их встроенными. 
Ни одна из них не должна изменять данные объекта, поэтому они объявлены с модификатором const. 
Вы можете вспомнить из главы 10, что это синтаксис для объявления функций, не модифицирующих объект, к которому они имеют непосредственный доступ. 
В листинге 11.14 показаны все методы и дружественные функции, объявленные в листинге 11.13. 
Код в листинге использует открытую природу пространств имен для добавления объявлений методов к пространству имен VECTOR. 
Следует отметить, что конструкторы и функция reset() устанавливают значения как для прямоугольного, так и для полярного представления вектора. 
Таким образом, оба набора значений становятся доступными немедленно, без дополнительных вычислений. Кроме того, как упоминалось в главах 4 и 7, встроенные математические функции C++ работают 
с углами в радианах, поэтому функции, преобразующие значения в градусы и обратно, встроены в методы.
Реализация класса Vector скрывает от пользователя такие вещи, как преобразования из полярных координат в прямоугольные и преобразования радианов в градусы. 
Все, что требуется знать пользователю — это то, что класс использует углы в градусах, и то, что он представляет вектор в двух эквивалентных представлениях. 
*/
