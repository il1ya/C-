/* Если вы находились в системе под конкретным именем пользователя в течение 2 часов 35 минут с утра и 2 часов 40 минут после обеда, то сколько всего времени вы проработали в системе? 
Ниже приведен пример, в котором концепция сложения имеет смысл, несмотря на то, что единицы, которые вы складываете (смесь часов и минут) не соответствует какому-либо встроенному типу. 
В главе 7 рассматривался подобный случай; там определялась структура travel_time и функция sum() для сложения структур упомянутого типа. 
Теперь давайте обобщим это в классе Time, используя метод для управления сложением. 
Начнем с простого метода, называемого Sum(), а затем посмотрим, как его преобразовать в перегруженную операцию. 
Объявление класса Time показано в листинге 11.1. 
Листинг 11.1. mytimeO.h */
// mytimeO.h — класс Time до перегрузки операции 

#ifndef MYTIME0_H_
#define MYTIME0_H_

class Time
{
    private:   
        int hours;
        int minutes;
    public:
        Time();
        Time(int h, int m = 0);
        void AddMin(int m);
        void AddHr(int h);
        void Reset(int h = 0, int m = 0);
        Time Sum(const Time & t) const;
        void Show() const;
};
#endif
/*
Класс Time предоставляет методы для Изменения и сброса времени, для отображения значений времени и для сложения двух значений времени. 
В листинге 11.2 приведено определение методов. Обратите внимание, что методы AddMin() и Sum() 
используют целочисленное деление и операцию взятия модуля для корректировки значений минут и часов, когда общее количество минут превышает 59. 
Также поскольку единственное средство iostream, которое здесь используется — это cout, а также потому, что оно применяется только один раз, имеет смысл указать std::cout вместо 
того, чтобы использовать все пространство имен std. 
*/