// Листинг 9.4. auto.срр 
// auto.срр --иллюстрация области видимости автоматических переменных 
#include <iostream>
void oil(int x);
int main(void)
{
    using namespace std;
    int texas = 31;
    int year = 2011;
    cout << "In main(), texas = " << texas << ", &texas = ";
    cout << &texas << endl;
    cout << "In main(), year = " << year << ", &year = ";
    cout << &year << endl;
    oil(texas);
    cout << "In main(), texas = " << texas << ", &texas = ";
    cout << &texas << endl;
    cout << "In main(), year = " << year << ", &year = ";
    cout << &year << endl;
    return 0;
}

void oil(int x)
{
    using namespace std;
    int texas = 5;
    cout << "In oil(), texas = " << texas << ", &texas = ";
    cout << &texas << endl;
    cout << "In oil(), x = " << x << ", &x = ";
    cout << &x << endl;
    {           // начало блока 
        int texas = 113;
        cout << "In block, texas = " << texas;
        cout << ", &texas = " << &texas << endl;
        cout << "In block, x = " << x << ", &x = ";
        cout << &x << endl;
    }           // конец блока 
    cout << "Post-block texas = " << texas;
    cout << ", &texas = " << &texas << endl;
}
/*
Ниже показан вывод программы из листинга 9.4: 
In main(), texas = 31, &texas = 0012FED4 
In main(), year = 2011, &year = 0012FEC8 
In oil(), texas = 5, &texas = 0012FDE4 
In oil(), x = 31, &x = 0012FDF4 
In block, texas = 113, &texas = 0012FDD8 
In block, x = 31, &x = 0012FDF4 
Post-block texas = 5, &texas = 0012FDE4 
In main(), texas = 31, &texas = 0012FED4 
In main(), year = 2011, &year = 0012FEC8 

Обратите внимание, что каждая из трех переменных texas в листинге 9.4 имеет собственный, отличающийся от других адрес, и программа использует только ту переменную, 
которая в данное время находится в области видимости. 
Поэтому присваивание переменной texas значения 113 во внутреннем блоке функции oil() никак не отражается на других переменных с тем же именем. 
(Как обычно, конкретные значения адресов и формат представления варьируются от системы к системе.) 
Рассмотрим последовательность событий. Когда main() начинается, программа выделяет память для переменных texas и year, и они обе попадают в область видимости. 
Когда программа вызывает функцию oil(), эти переменные остаются в  памяти, но покидают область видимости. 
Две новых переменных, х и texas, размещаются в памяти и попадают в область видимости. Когда выполнение программы достигает 
внутреннего блока в функции oil(), новая переменная texas выходит из области видимости (скрывается), поскольку замещается более новым определением. 
Однако переменная х остается в области видимости, т.к. в блоке новая переменная с таким же именем не определяется. 
Когда выполнение программы выходит за пределы этого блока, освобождается память, занятая самой новой переменной texas, а вторая переменная texas возвращается в область видимости. 
После завершения функции oil() переменные texas и х перестают существовать, а в область видимости возвращаются исходные переменные texas и year. 
*/