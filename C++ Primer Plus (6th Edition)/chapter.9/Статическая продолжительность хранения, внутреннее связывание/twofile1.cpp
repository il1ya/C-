/*
Внешнюю переменную можно применять для разделения данных между различными частями многофайловой программы. 
Статическую переменную с внутренним связыванием можно использовать для разделения данных между различными функциями в одном файле. 
(Пространства имен предоставляют для этого альтернативный метод.) Кроме того, если переменную с областью видимости файла сделать static, то не  
придется беспокоиться о конфликте ее имени с переменными с областью видимости файла, которые содержатся в других файлах. 
В листингах 9.7 и 9.8 показано, каким образом в C++ поддерживаются переменные с внешним и внутренним связыванием. 
В листинге 9.7 (twof ilel .срр) определены внешние переменные torn и dick, а также статическая внешняя переменная harry. 
Функция main() в этом файле отображает адреса всех трех переменных и затем вызывает функцию remote_access(), которая определена во втором файле. 
Содержимое этого файла (twof ile2 . срр) приведено в листинге 9.8. Помимо определения функции remoteaccess(), в этом файле с помощью ключевого слова extern используется переменная torn из первого файла. 
Далее в нем определяется статическая переменная по имени dick. Модификатор static делает эту переменную локальной по отношению к файлу и переопределяет глобальное определение. 
Затем во втором файле определяется внешняя переменная по имени harry. 
При этом конфликт с переменной harry из первого файла не возникает, поскольку она обладает только внутренним связыванием. 
После этого функция remote_access() отображает адреса всех трех переменных, так что их можно сравнить с адресами соответствующих переменных из первого файла. 
Не забывайте, что для получения готовой программы потребуется скомпилировать и скомпоновать оба файла. 
Листинг 9.7. twofilel.срр */
// twofilel.срр — переменные с внешним и внутренним связыванием 
#include <iostream> // должен компилироваться вместе с twofile2.cpp 
int tom = 3;    // определение внешней переменной 
int dick = 30;  // определение внешней переменной 
static int harry = 300; // статическая, внутреннее связывание 

// Прототип функции 
void remote_access();

int main(void)
{
    using namespace std;
    cout << "main() reports the following addresses:\n"; // вывод адресов 
    cout << &tom << " = &tom, " << &dick << " = &dick, ";
    cout << &harry << " = &harry\n";
    remote_access();
    return 0;
}