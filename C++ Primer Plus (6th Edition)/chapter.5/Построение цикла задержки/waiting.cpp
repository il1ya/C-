/* Библиотеки ANSI С и C++ включают функцию, которая помогает в этом. Она называется clock() и возвращает системное время, прошедшее с момента запуска 
программы. Однако с ней связано несколько сложностей. Во-первых, clock () не обязательно возвращает время в секундах. 
Во-вторых, типом возврата этой функции в одних системах может быть long, в других — unsigned long, а в третьих — еще каким-нибудь. 
Заголовочный файл с time (time.h в более старых реализациях) предлагает решение этих проблем. Во-первых, он определяет символическую константу CLOCKSPERSEC, 
которая содержит количество единиц системного времени, приходящихся на секунду. То есть, разделив показание системного времени на эту константу, вы получите 
секунды. Или же вы можете умножить секунды на CLOCKS_PER_SEC, чтобы получить время в системных единицах. Во-вторых, с time устанавливает псевдоним clock_t 
для типа возврата clock(). (См. ниже врезку "Псевдонимы типов".) Это значит, что вы можете объявить переменную типа clock_t, и компилятор преобразует ее в long 
или unsigned int либо в любой другой подходящий для системы тип. В листинге 5.14 демонстрируется использование clock() и с time для организации цикла задержки. 
Листинг 5.14. waiting.срр */
// waiting.срр -- использование clock() в цикле временной задержки 
#include <iostream>
#include <ctime> // описывает функцию clock() и тип clock_t 
int main(void)
{
    using namespace std;
    cout << "Enter the delay time, in seconds: "; // ввод времени задержки в секундах 
    float secs;
    cin >> secs;
    clock_t delay = secs * CLOCKS_PER_SEC; // преобразование в тики 
    cout << "starting\a\n";
    clock_t start = clock();
    while(clock() - start < delay) // ожидание истечения времени 
    ; // обратите внимание на точку с запятой 
    cout << "done \a\n";
    return 0;
}