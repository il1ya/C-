/* Жизнь станет немного легче, если вместо строк в стиле С использовать строки класса string, поскольку этот класс позволяет применять операции отношений для выполнения сравнений. 
Это становится возможным благодаря определению функций класса, которые "перегружают", или переопределяют, операции. В главе 12 будет показано, 
как включать это средство в классы, но с практической точки зрения все, что вам нужно знать сейчас — это то, что с объектами класса string можно использовать операции сравнения. 
В листинге 5.12 представлен преобразованный код из листинга 5.11, в котором вместо массива char применяется объект string. 
Листинг 5.12. compstr2.срр */
// compstr2.cpp — сравнение строк с использованием класса string 
#include <iostream>
#include <string> // класс string 
int main(void)
{
    using namespace std;
    string word = "?ate";
    for(char ch = 'a'; word != "mate"; ch++)
    {
        cout << word << endl;
        word[0] = ch;
    }
    cout << "After loop ends, word is " << word << endl;
    return 0;
}
/* 
Замечания по программе 
В листинге 5.12 приведенное ниже проверочное условие использует операцию сравнения с объектом string в левой части и строкой в стиле С — в правой части: 
word != "mate" 
Способ перегрузки операции != классом string позволяет применять ее, если хотя бы один из операндов является объектом string; второй операнд при этом может быть либо объектом string, либо строкой в стиле С. 
Класс string позволяет использовать объект string либо в качестве одиночной сущности, как в выражениях сравнения, либо в качестве агрегатного объекта, допускающего нотацию массивов для извлечения индивидуальных символов. 
Как видите, одного и того же результата можно достигнуть как с помощью строки в стиле С, так и с помощью объектов string, но программирование с объектами string проще и намного понятней. 
И, наконец, в отличие от большинства циклов for, которые вы видели до сих пор, два последних цикла не имеют счетчиков. То есть они не выполняют блок  
операторов определенное количество раз. Вместо этого каждый из циклов проверяет определенное условие (равенство слову "mate"), 
которое сигнализирует о необходимости завершения. Для программ C++ более типично применять в таких случаях цикл while, поэтому давайте рассмотрим его в следующем разделе. 
*/