/* Как вы уже видели, блок позволяет помещать два и более оператора там, где синтаксис C++ разрешает лишь один. Операция запятой (,) делает то же самое с  
выражениями, позволяя вставлять два выражения туда, где синтаксис C++ допускает только одно. Например, предположим, что имеется цикл, в котором на каждом шаге одна 
переменная увеличивается на единицу, а вторая — на единицу уменьшается. 
Было бы удобно сделать то и другое в обновляющей части цикла for, но синтаксис цикла разрешает там только одно выражение. Решение состоит в применении операции  
запятой для комбинации двух выражений в одно: 
++j , —і // два выражения воспринимаются как одно 
// для удовлетворения требований синтаксиса 
Запятая — это не всегда операция. Например, запятая в следующем объявлении служит для разделения имен в списке объявляемых переменных: 
int i, j; // здесь запятая — разделитель, а не операция 
В листинге 5.9 операция запятой используется дважды в программе, которая переставляет содержимое объекта класса string. (Написать программу можно также с 
использованием массива char, но длина слова должна ограничиваться определенным размером массива.) Обратите внимание, что код в листинге 5.6 отображает  
содержимое массива в обратном порядке, а код в листинге 5.9 на самом деле перемещает символы по кругу в пределах массива. Программа из листинга 5.9 также использует 
блок для объединения нескольких операторов в один. 
Листинг 5.9. f orstr2 . срр */
// forstr2.cpp -- обращение порядка элементов массива 
#include <iostream>
#include <string>
int main(void)
{
    using namespace std;
    cout << "Enter a word: ";
    string word;
    cin >> word;
    // Физическая модификация объекта string 
    char temp;
    int i, j;
    for(j = 0, i = word.size() - 1; j < i; --i, ++j)
    {                                   // начало блока 
        temp = word[i];
        word[i] = word[j];
        word[j] = temp;
    }                                   // конец блока 
    cout << word << "\nDone\n";
    return 0;
}