/* В листинге 4.20 иллюстрируется применение различных форм строк. Код в этом листинге использует две функции из библиотеки обработки строк. 
Функция strlen(), которую вы уже применяли ранее, возвращает длину строки. Функция strcpy() копирует строку из одного места в другое. 
Обе функции имеют прототипы в файле заголовков cstring (или string, h — в устаревших реализациях). 
В программе также присутствуют комментарии, предупреждающие о возможных случаях неправильного применения указателей, которых следует избегать. 
Листинг 4.20. ptrstr.cpp */
// ptrstr.cpp -- использование указателей на строки 
#include <iostream>
#include <cstring> // объявление strlen(), strcpy() 
int main(void)
{
    using namespace std;
    char animal[20] = "bear";  // animal содержит bear 
    const char *bird = "wren"; // bird содержит адрес строки 
    char *ps;                  // не инициализировано 

    cout << animal << " and "; // отображение bear 
    cout << bird << "\n";      // отображение wren 

    // cout << ps << "\n"; // может отобразить мусор, но может вызвать и аварийное завершение программы 
    cout << "Enter a kind of animal: ";
    cin >> animal; // нормально, если вводится меньше 20 символов 
    // cin >> ps; очень опасная ошибка, чтобы пробовать ps не указывает на выделенное пространство 
    ps = animal; // установка ps в указатель на строку 
    cout << ps << "!\n"; // нормально; то же, что и применение animal 
    
    cout << "Before using strcpy():\n";
    cout << animal << " at " << (int *) animal << endl;
    cout << ps << " at " << (int *) ps << endl;
    ps = new char[strlen(animal) + 1]; // получение нового хранилища 
    strcpy(ps, animal); // копирование строки в новое хранилище 

    cout << "After using strcpy():\n";
    cout << animal << " at " << (int *) animal << endl;
    cout << ps << " at " << (int *) ps << endl;
    delete [] ps;
    return 0;


}