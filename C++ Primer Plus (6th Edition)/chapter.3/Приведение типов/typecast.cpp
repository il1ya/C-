// Листинг 3.14. typecast.срр 
// typecast.срр -- принудительное изменение типов 
#include <iostream>
int main(void)
{
    using namespace std;
    int auks, bats, coots;

    // следующий оператор суммирует значения типа double, 
    // а полученный результат преобразуется в тип int 
    auks = 19.99 + 11.99;
    // эти операторы суммируют целочисленные значения 
    bats = (int) 19.99 + (int) 11.99;   // старый синтаксис С 
    coots = int (19.99) + int (11.99);  // новый синтаксис C++ 
    cout << "auks = " << auks << ", bats = " << bats;
    cout << ", coots = " << coots << endl;
    char ch = 'Z';
    cout << "the code for " << ch << " is "; // вывод в формате char 
    cout << int(ch) << endl;                // вывод в формате int 
    cout << "Yes, the code is ";
    cout << static_cast<int>(ch) << endl;  // использование static_cast 
    return 0;
}

/* Сложение чисел 19. 99 и 11. 99 дает в результате 31. 98. Когда это значение присваивается переменной auks типа int, оно усекается до 31. 
Однако если использовать приведения типов до суммирования, то значения будут усечены до 19 и 11, поэтому в результате переменные bats и coots получат значение 30. 
Затем в двух операторах cout приведения типов применяются для преобразования значений char в int перед 
их отображением. Эти преобразования приводят к тому, что cout выведет значение в виде целого числа, а не символа. 
В этой программе проиллюстрированы две причины использования приведения типов. Скажем, у вас могут быть значения, которые хранятся в формате double, но используются для вычисления значения int. 
Например, требуется привязка к позиции на сетке или моделирование целочисленных значений, таких как размер популяции, с помощью значений с плавающей точкой. Может понадобиться, чтобы в  
вычислениях все значения трактовались как int. Все это позволяет сделать приведение типов. Обратите внимание, что вы получите разные результаты
(во всяком случае, для этих значений) в ситуациях, когда сначала применяется преобразование в int и затем суммирование, и когда сначала выполняется суммирование, а затем преобразование в int. 
Во второй части программы продемонстрирована наиболее распространенная причина использования приведения типа: возможность заставить данные в одной 
форме удовлетворять различным ожиданиям. Например, в листинге 3.14 переменная ch типа char хранит код буквы Z. Использование cout для вывода ch приводит к 
отображению буквы Z, поскольку cout концентрирует внимание на факте принадлежности переменной ch к типу char. 
Однако за счет приведения ch к типу int объект cout переключается на режим int и выводит ASCII-код, хранящийся в ch. */
