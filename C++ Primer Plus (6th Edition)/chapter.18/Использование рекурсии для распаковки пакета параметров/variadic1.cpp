/*
Часть трюка предусматривает изменение заголовка шаблона: 
template<typename Т, typename... Args> 
void show_list3(T value, Args... args) 
При таком определении первый аргумент show_list3() получает тип Т и присваивается value. Остальные аргументы принимаются пакетами Args и args. 
Это позволяет функции сделать что-то с value, например, отобразить значение. После этого оставшиеся аргументы в форме args... могут быть переданы рекурсивному вызову show_list3(). 
Каждый рекурсивный вызов затем выводит значение и передает сократившийся список до тех пор, пока список не закончится. 
В листинге 18.9 приведена реализация, которая хотя и не идеально, но иллюстрирует описанный прием. 
Листинг 18.9. variadicl.срр */
// variadicl.срр -- использование рекурсии для распаковки пакета параметров 
#include <iostream>
#include <string>
// Определение для 0 параметров — завершение вызова 
void show_list3()
{

}

// Определение для 1 и более параметров 
template<typename T, typename... Args>
void show_list3(T value, Args... args)
{
    std::cout << value << ", ";
    show_list3(args...);
}
int main()
{
    int n = 14;
    double x = 2.71828;
    std::string mr = "Mr. String objects!";
    show_list3(n, x);
    std::cout << "\n";
    show_list3(x * x, '!', 7, mr);
    return 0;
}
/*
Замечания по программе 
Взгляните на следующий цызов: 
show_list3(x*x, '!', 7, mr) ; 
Первый аргумент сопоставляет Т с double и value с х*х. Оставшиеся три типа (char, int и std::string) помещаются в пакет Args, а оставшиеся три значения ('!', 7 и mr) — в пакет args. 
Затем функция show_list3() использует cout для отображения value (приблизительно 7.38905) и строки ",". Это обеспечивает вывод первого элемента в списке. 
Далее идет следующий вызов: 
show_list3(args...); 
С учетом развертывания args . . . он будет выглядеть следующим образом: 
show list3 ('!', 7, mr); 
Как упоминалось ранее, список сократился на один элемент. В данный момент Т и value становятся char и '!', а оставшиеся два типа и значения упаковываются, соответственно, в Args и args. 
Следующий рекурсивный вызов обрабатывает эти сократившиеся пакеты. Наконец, когда пакет args пуст, вызывается версия show_list3() без аргументов и процесс завершается. 
Ниже показан вывод из двух вызовов функций из листинга 18.5: 
14, 2.71828, 7.38905, !, 7, Mr. String objects!, 
*/