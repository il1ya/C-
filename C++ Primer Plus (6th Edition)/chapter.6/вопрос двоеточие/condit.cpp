/* Операция ?: 
Язык C++ включает операцию, которая часто может использоваться вместо оператора if else. 
Она называется условной операцией, записывается как ? : и является единственной операцией C++, которая требует трех операндов. 
Ее общая форма выглядит следующим образом: 
выражениеі ? выражение2 : выражениеЗ 
Если выражение 1 истинно, то значением всего условного выражения будет значение выражение2. 
В противном случае значением всего выражения будет выражениеЗ. 
Ниже приведены два примера, демонстрирующие ее работу: 
5 > 3 ? 10: 12 // 5 > 3 истинно, поэтому значением всего выражения будет 10 
3 == 9? 25: 18 // 3 == 9 ложно, поэтому значением всего выражения будет 18 
Первый пример можно перефразировать так: если 5 больше, чем 3, то выражение оценивается как 10; иначе оно оценивается как 12. 
В реальных ситуациях программирования выражения, конечно же, могут включать в себя переменные. 
Код в листинге 6.9 использует условную операцию для нахождения большего из двух значений. 
Листинг 6.9. condit.срр */
// condit.срр — использование условной операции 
#include <iostream>
int main(void)
{
    using namespace std;
    int a, b;
    cout << "Enter two integers: ";     // запрос на ввод двух целых чисел 
    cin >> a >> b;
    cout << "The larger of " << a << " and " << b;
    int c = a > b ? a : b;              // с = а, если а > b, иначе с = b 
    cout << " is " << c << endl;        // вывод большего из указанных чисел 
    return 0;
}
/*
Ключевой частью программы является следующий оператор: 
int c = a > b ? a : b; 
Он выдает тот же результат, что и приведенные ниже операторы: 
int с; 
if (а > Ь) 
    с = а; 
else 
    с = Ь; 
По сравнению с последовательностью if else условная операция более короткая, но на первый взгляд не так очевидна. 
Одно отличие между этими двумя подходами заключается в том, что условная операция порождает выражение, 
а потому единственное значение, которое может быть присвоено или встроено в более крупное выражение, как это сделано в программе из листинга 6.9, 
где значение условного выражения присваивается переменной с. Краткая форма и необычный синтаксис условной операции высоко ценится некоторыми программистами. 
Их любимый трюк, достойный порицания, состоит в использовании вложенных друг в друга условных выражений, как показано в следующем относительно несложном примере: 
const char x[2] [20] = ("Jason ","at your service\n"}; 
const char *у = "Quillstone "; 
for (int i = 0; i < 3; i++) 
cout << ((i < 2) ? !i ? x[i] : у : x[l]); 
Это лишь завуалированный (но отнюдь не максимально завуалированный) способ вывода трех строк в следующем порядке: 
Jason Quillstone at your service 
В терминах читабельности условная операция больше подходит для простых отношений и простых значений выражений вроде: 
х= (х>у) ?х : у; 
Если же код становится более сложным, то, возможно, более ясно его получится выразить с помощью оператора if else. 
*/
