/* Операция ! выполняет отрицание, или обращает, истинность выражения, следующего за ней. 
То есть если expression равно true, то ! expression равно false, и наоборот. Точнее говоря, если expression имеет значение true, или ненулевое, то ! expression будет равно false. 
Обычно выражение отношения можно представить яснее без применения операции !: 
if (! (х > 5)) //в этом случае if (х <= 5) яснее 
Однако операция ! может быть полезна с функциями, которые возвращают значения true/false либо значения, которые могут интерпретироваться подобным образом. 
Например, strcmp (si, s2) возвращает не ноль (true), если две строки в стиле С, si и s2, отличаются друг от друга, и ноль, если они одинаковы. 
Это значит, что !strcmp(sl, s2) равно true, если две строки эквивалентны. 
В листинге 6.7 используется прием применения операции ! к значению, которое возвращается функцией проверки числового ввода на предмет возможности его  
присваивания типу int. Пользовательская функция is_int (), которая будет рассматриваться позже, возвращает true, если ее аргумент находится в диапазоне допустимых значений для присваивания типу int.
Затем программа применяет проверку условия while (! is_int (num) ) , чтобы отклонить значения, которые не входят в диапазон. 
Листинг 6.7. not.cpp */
// not.cpp -- использование логической операции "НЕ" 
#include <iostream>
#include <climits>
bool is_int(double);
int main(void)
{
    using namespace std;
    double num;
    cout << "Yo, dude! Enter an integer value: ";   // запрос на ввод целочисленного значения 
    cin >> num;
    while(!is_int(num))                              // продолжать, пока num не является int 
    {
        cout << "Out of range -- please try again: "; // выход за пределы диапазона 
        cin >> num;
    }
    int val = int(num); // приведение типа 
    cout << "You've entered the integer " << val << "\nBye";
    return 0;
}
bool is_int(double x)
{
    if(x <= INT_MAX && x >= INT_MIN)   // проверка предельных значений climits 
    return true;
    else
    return false;
}
/*
Замечания по программе 
В случае ввода слишком большого значения при выполнении программы, читающей тип int, многие реализации C++ просто усекают значение, не сообщая о потере данных. 
Программа в листинге 6.7 избегает этого за счет того, что читает потенциальное значение int как double. 
Тип double имеет более чем достаточную точность для того, чтобы сохранить обычное значение int, а его диапазон допустимых значений намного больше. 
Другим вариантом могло быть сохранение веденного значения в переменной типа long long, предполагая, что этот тип шире, чем int. 
Булевская функция is_int () использует две символические константы (INT_MAX и INT_MIN), 
определенные в файле с limits (который обсуждался в главе 3), для проверки, что значение ее аргумента находится в допустимых пределах. 
Если это так, функция возвращает true; в противном случае — false. 
В функции main() используется условие цикла для отклонения неправильного ввода пользователя. 
Можно сделать программу более дружественной за счет отображения допустимых границ int, когда введено неправильное значение. 
После проверки достоверности введенного значения программа присваивает его переменной типа int. 
*/