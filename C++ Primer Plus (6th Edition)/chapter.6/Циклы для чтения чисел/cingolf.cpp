/* В предыдущем примере не предпринимается попытка читать информацию после получения нечислового ввода. 
Рассмотрим случай, когда это все-таки нужно делать. 
Предположим, что требуется ввести ровно пять результатов игры в гольф в  программу, вычисляющую средний результат. 
Если пользователь вводит нечисловое значение, программа должна напомнить ему, что требуется число. Предположим, что программа обнаружила неправильный ввод пользователя. 
Она должна выполнить три действия. 
1. Сбросить состояние cin для принятия нового ввода. 
2. Освободиться от некорректного ввода. 
3. Предложить пользователю повторить ввод. 
Обратите внимание, что программа должна сбросить cin перед тем, как отклонять неверный ввод. В листинге 6.14 показано, как все это сделать. 
Листинг 6.14. cingolf.срр */
// cingolf.срр -- нечисловой ввод пропускается 

#include <iostream>
const int Max = 5;
int main(void)
{
    using namespace std;
    // Получение данных 
    int golf[Max];
    cout << "Olease enter your golf scores.\n";
    cout << "You must enter " << Max << " rounds.\n"; // ввод результатов в гольфе 
    int i;
    for(i = 0; i < Max; i++)
    {
        cout << "round #" << i + 1 << ": ";
        while(!(cin >> golf[i]))
        {
            cin.clear(); // сброс ввода 
            while(cin.get() != '\n')
            continue; // отбрасывание некорректного ввода 
            cout << "Please enter a number: ";
        }
    }
    // Вычисление среднего 
    double total = 0.0;
    for(i = 0; i < Max; i++)
        total += golf[i];
        // Вывод результатов 
        cout << total / Max << " = average score " << Max << " rounds\n";
        return 0;
}
/*
Замечания по программе 
Центральная часть кода обработки ошибок в листинге 6.14 выглядит следующим образом: 
while (!(cin » golf[i])) 
{ 
    cin.clear(); // сброс ввода 
    while (cin.get() != '\n') 
    continue; // отбрасывание некорректного ввода 
    cout « "Please enter a number: "; 
}

Если пользователь введет 88, то выражение cin равно true и значение помещается в массив. Более того, поскольку сіп равно true, выражение ! (cin » golf [i]) 
принимает значение false, и внутренний цикл прекращается. 
Но если пользователь вводит must i?, то выражение cin принимает значение false, в массив ничего не помещается, выражение !(cin » golf [i]) принимает значение true, и программа 
входит во вложенный цикл while. 
Первый оператор в цикле использует метод clear () для очистки ввода. Если этот оператор опустить, программа не сможет прочитать никакого нового ввода. 
Далее программа использует cin.get() в цикле while, чтобы прочитать остаток ввода до конца строки. 
Это позволяет удалить некорректный ввод вместе со всем, что может еще содержаться в строке. 
Другой подход заключается в чтении до следующего пробела, что позволит удалять по одному слову за раз, вместо того, чтобы удалять всю некорректную строку. 
После этого программа напоминает пользователю, что нужно вводить число. 
*/