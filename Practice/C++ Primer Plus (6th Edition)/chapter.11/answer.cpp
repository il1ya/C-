 1. Воспользуйтесь функцией-членом для перегрузки операции умножения в классе Stonewt; определите операцию умножения членов данных на значение типа double. 
Имейте в виду, что нужно будет позаботиться о представлении "стоун-фунт". То есть удвоение 10 стоунов и 8 фунтов должно давать 21 стоун и 2 фунта. 
1. Ниже показан прототип для файла определения класса и определение функции для файла методов: 
// прототип
Stonewt operator*(double mult);
// определение — позволяет конструктору выполнять свою работу 
Stonewt Stonewt::operator*(double mult)
{
    return Stonewt(mult * pounds);
}

2. В чем отличия между дружественной функцией и функцией-членом? 
2. Функция-член является частью определения класса и вызывается конкретным объектом. 
Функция-член может обращаться к членам вызывающего объекта явным образом, не используя операцию членства. 
Дружественная функция не является частью класса, поэтому она вызывается подобно обычной функции. 
Она не может обращаться к членам класса явно, поэтому в ней должна применяться операция членства к объекту, переданному в качестве аргумента. 
Сравните, например, ответы на первый и четвертый вопросы. 


3. Должна ли функция, не являющаяся членом, быть дружественной для того, чтобы иметь доступ к членам класса? 
3. Для доступа к закрытым членам она должна быть дружественной, но не должна быть таковой для обращения к открытым членам. 

4. Воспользуйтесь дружественной функцией для перегрузки операции умножения в классе Stonewt; определите операцию умножения значения double на значение Stone. 
// прототип
friend Stonewt operator*(double mult, const Stonewt & s);
// определение — позволяет конструктору выполнять свою работу 
Stonewt operator*(double mult, const Stonewt & s)
{
    return Stonewt(mult * s.pounds);
}

5. Какие операции не могут быть перегружены? 
sizeof
.*
::
?:

6. Какие ограничения накладываются на перегрузку следующих операций: =, (), [] и ->? 
6. Эти операции должны быть определены с использованием функций-членов. 


7. Определите функцию преобразования для класса Vector, которая будет приводить объект Vector к значению типа double, которое представляет длину вектора. 
// прототип и встроенное определение 
operator double () {return mag; } 
Однако обратите внимание, что лучше использовать метод magval (), чем определять эту функцию преобразования. 

